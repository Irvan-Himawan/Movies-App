{"version":3,"sources":["components/search.js","components/Result.js","components/Results.js","components/ModalResult.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["search","handleInput","className","type","placeholder","onChange","onKeyPress","Result","result","openModal","onClick","imdbID","Poster","Error","src","alt","Title","Year","Results","results","map","key","ModalResult","selected","closeModal","Released","Genre","Rated","Runtime","Actors","Language","Production","Director","Writer","Awards","style","marginTop","textAlign","fontWeight","letterSpacing","Plot","imdbVotes","imdbRating","alignSelf","Footer","year","Date","getFullYear","href","App","useState","s","newRelease","state","setState","apiUrl","useEffect","axios","Fragment","e","target","value","prevState","then","data","Search","catch","console","log","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2OAkBeA,MAhBf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaD,EAAU,EAAVA,OAC7B,OACE,iCACE,yBAAKE,UAAU,UACb,2BACEC,KAAK,OACLC,YAAY,mBACZC,SAAUJ,EACVK,WAAYN,IAEd,mF,gBCQOO,MAlBf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACxB,OACE,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACnC,QAAlBH,EAAOI,QAAoBC,MAC1B,yBAAKC,IAAKN,EAAOI,OAAQG,IAAKP,EAAOQ,QAErC,yBAAKd,UAAU,YACb,wCAIJ,4BACGM,EAAOQ,MADV,KACmBR,EAAOS,KAD1B,OCASC,MAVf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAASV,EAAa,EAAbA,UAC1B,OACE,6BAASP,UAAU,WAChBiB,EAAQC,KAAI,SAACZ,GAAD,OACX,kBAAC,EAAD,CAAQa,IAAKb,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCyDhDa,MA9Df,YAAgD,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC/B,OACE,6BAAStB,UAAU,SACjB,yBAAKA,UAAU,WACb,yBAAKY,IAAKS,EAASX,OAAQG,IAAKQ,EAASP,QACzC,yBAAKd,UAAU,eACb,qCAAWqB,EAASP,OACpB,yCAAeO,EAASE,UACxB,sCAAYF,EAASG,OACrB,sCAAYH,EAASI,OACrB,wCAAcJ,EAASK,SACvB,sCAAYL,EAASM,OAArB,KACA,0CAAgBN,EAASO,UACzB,2CAAiBP,EAASQ,YAC1B,yCAAeR,EAASS,UACxB,uCAAaT,EAASU,OAAtB,KACA,uCAAaV,EAASW,OAAtB,KAEA,uBACEC,MAAO,CACLC,UAAW,SAFf,SAKS,KAET,uBACED,MAAO,CACLE,UAAW,SAEXC,WAAY,MACZC,cAAe,WALnB,KAQKhB,EAASiB,KARd,OAWF,yBAAKtC,UAAU,QACb,2CACe,IACb,0BAAMiC,MAAO,CAAEI,cAAe,QAAUhB,EAASkB,YAEnD,6BAEF,yBAAKvC,UAAU,QACb,4CACgB,IACd,0BAAMiC,MAAO,CAAEI,cAAe,QAAUhB,EAASmB,aAEnD,gCAEF,4BACExC,UAAU,QACVQ,QAASc,EACTW,MAAO,CAAEE,UAAW,SAAUM,UAAW,WAH3C,YCjCOC,MAjBf,WACE,IACIC,GADQ,IAAIC,MACCC,cACjB,OACE,gCACE,yBAAK7C,UAAU,eACb,uDAC4B,IAC1B,uBAAG8C,KAAK,2BAAR,iBAEF,6BACA,6CAAgBH,EAAhB,gCCqFOI,MA3Ff,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHhC,QAAS,GACTI,SAAU,GACV6B,WAAY,KALD,mBACNC,EADM,KACCC,EADD,KAOPC,EAAS,0CAwDf,OAtDAC,qBAAU,WACRC,IAAMF,MAsDN,kBAAC,IAAMG,SAAP,KACE,gCACE,yCACA,sEAEF,8BACE,kBAAC,EAAD,CAAQzD,YAvCM,SAAC0D,GACnB,IAAIR,EAAIQ,EAAEC,OAAOC,MAEjBP,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEEX,EAAGA,QAiC+BnD,OA1DzB,SAAC2D,GACA,UAAVA,EAAEtC,KACJoC,IAAMF,EAAS,MAAQF,EAAMF,GAC1BY,MAAK,YAAe,IACf5C,EADc,EAAX6C,KACYC,OAEnBX,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEE3C,QAASA,UAId+C,OAAM,SAACrD,GACNsD,QAAQC,IAAIvD,SA6CW,oBAAjBwC,EAAMlC,QACZ,kBAAC,EAAD,CAASA,QAASkC,EAAMlC,QAASV,UA9BvB,SAAC4D,GACjBZ,IAAMF,EAAS,MAAQc,GAAIN,MAAK,YAAe,IACzCvD,EADwC,EAAXwD,KAEjCG,QAAQC,IAAI5D,GACZ8C,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEEvC,SAAUf,aAyBV,yBAAKN,UAAU,YACb,mEAI4B,oBAAxBmD,EAAM9B,SAASP,OACrB,kBAAC,EAAD,CAAaO,SAAU8B,EAAM9B,SAAUC,WAzB5B,WACjB8B,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEEvC,SAAU,YA2BZ,kBAAC,EAAD,QCjFc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.6d1444b0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction search({ handleInput, search }) {\r\n  return (\r\n    <section>\r\n      <div className=\"search\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search a movie..\"\r\n          onChange={handleInput}\r\n          onKeyPress={search}\r\n        />\r\n        <p>Example : Sherlock Holmes, Avengers, Lion King...</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default search;\r\n","import React from \"react\";\r\n\r\nfunction Result({ result, openModal }) {\r\n  return (\r\n    <div className=\"result\" onClick={() => openModal(result.imdbID)}>\r\n      {result.Poster !== \"N/A\" && Error ? (\r\n        <img src={result.Poster} alt={result.Title} />\r\n      ) : (\r\n        <div className=\"no-image\">\r\n          <p>No Image</p>\r\n        </div>\r\n      )}\r\n\r\n      <h3>\r\n        {result.Title} ({result.Year})\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Result from \"./Result\";\r\n\r\nfunction Results({ results, openModal }) {\r\n  return (\r\n    <section className=\"results\">\r\n      {results.map((result) => (\r\n        <Result key={result.imdbID} result={result} openModal={openModal} />\r\n      ))}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\n\r\nfunction ModalResult({ selected, closeModal }) {\r\n  return (\r\n    <section className=\"modal\">\r\n      <div className=\"content\">\r\n        <img src={selected.Poster} alt={selected.Title} />\r\n        <div className=\"description\">\r\n          <p>Name : {selected.Title}</p>\r\n          <p>Released : {selected.Released}</p>\r\n          <p>Genre : {selected.Genre}</p>\r\n          <p>Rated : {selected.Rated}</p>\r\n          <p>Duration: {selected.Runtime}</p>\r\n          <p>Actor : {selected.Actors} </p>\r\n          <p>Languages : {selected.Language}</p>\r\n          <p>Production : {selected.Production}</p>\r\n          <p>Director : {selected.Director}</p>\r\n          <p>Writer : {selected.Writer} </p>\r\n          <p>Awards : {selected.Awards} </p>\r\n\r\n          <p\r\n            style={{\r\n              marginTop: \"10px\",\r\n            }}\r\n          >\r\n            Plot :{\" \"}\r\n          </p>\r\n          <p\r\n            style={{\r\n              textAlign: \"center\",\r\n\r\n              fontWeight: \"200\",\r\n              letterSpacing: \"normal\",\r\n            }}\r\n          >\r\n            \" {selected.Plot} \"\r\n          </p>\r\n        </div>\r\n        <div className=\"imdb\">\r\n          <h1>\r\n            IMDB Votes :{\" \"}\r\n            <span style={{ letterSpacing: \"2px\" }}>{selected.imdbVotes}</span>\r\n          </h1>\r\n          <p></p>\r\n        </div>\r\n        <div className=\"imdb\">\r\n          <h1>\r\n            IMDB Rating :{\" \"}\r\n            <span style={{ letterSpacing: \"2px\" }}>{selected.imdbRating}</span>\r\n          </h1>\r\n          <span></span>\r\n        </div>\r\n        <button\r\n          className=\"close\"\r\n          onClick={closeModal}\r\n          style={{ textAlign: \"center\", alignSelf: \"center\" }}\r\n        >\r\n          Close\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ModalResult;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  let today = new Date();\r\n  let year = today.getFullYear();\r\n  return (\r\n    <footer>\r\n      <div className=\"__container\">\r\n        <p>\r\n          This resources belongs to{\" \"}\r\n          <a href=\"http://www.omdbapi.com/\">The OMDb API</a>\r\n        </p>\r\n        <br></br>\r\n        <p>Copyright Â© {year} created by Irvan Alvisa </p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport Search from \"./components/search\";\nimport axios from \"axios\";\nimport Results from \"./components/Results\";\nimport ModalResult from \"./components/ModalResult\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {},\n    newRelease: [],\n  });\n  const apiUrl = \"http://www.omdbapi.com/?apikey=2267788b\";\n\n  useEffect(() => {\n    axios(apiUrl);\n  });\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiUrl + \"&s=\" + state.s)\n        .then(({ data }) => {\n          let results = data.Search;\n\n          setState((prevState) => {\n            return {\n              ...prevState,\n              results: results,\n            };\n          });\n        })\n        .catch((Error) => {\n          console.log(Error);\n        });\n    }\n  };\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState((prevState) => {\n      return {\n        ...prevState,\n        s: s,\n      };\n    });\n  };\n\n  const openModal = (id) => {\n    axios(apiUrl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n      console.log(result);\n      setState((prevState) => {\n        return {\n          ...prevState,\n          selected: result,\n        };\n      });\n    });\n  };\n\n  const closeModal = () => {\n    setState((prevState) => {\n      return {\n        ...prevState,\n        selected: {},\n      };\n    });\n  };\n  return (\n    <React.Fragment>\n      <header>\n        <h1>Movie Gag</h1>\n        <p>Find your movie(s) information in here</p>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search} />\n        {typeof state.results != \"undefined\" ? (\n          <Results results={state.results} openModal={openModal} />\n        ) : (\n          <div className=\"notFound\">\n            <p>Sorry, we couldn't find your movies</p>\n          </div>\n        )}\n\n        {typeof state.selected.Title != \"undefined\" ? (\n          <ModalResult selected={state.selected} closeModal={closeModal} />\n        ) : (\n          false\n        )}\n      </main>\n\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/myapps.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}